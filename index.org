#+REVEAL_ROOT: ./reveal.js
#+OPTIONS: toc:nil timestamp:nil num:nil reveal_title_slide:nil
#+REVEAL_TRANS: linear
#+REVEAL_THEME: solarized
#+REVEAL_MULTIPLEX_ID: 912f5f4cb475d9ef
#+REVEAL_MULTIPLEX_SECRET: 14844766394814264828
#+REVEAL_MULTIPLEX_URL: https://reveal-js-multiplex-ccjbegmaii.now.sh
#+REVEAL_MULTIPLEX_SOCKETIO_URL: https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.7/socket.io.min.js
#+REVEAL_PLUGINS: (highlight notes multiplex)
#+REVEAL_EXTRA_JS: {src: "./mouseclick.js"}
* PGP integration with CISC
#+BEGIN_NOTES
Dedis project called CISC Identity Skipchain \Rightarrow goal manage identity on a cothority, simple to use, distributed, secure.

Goal of this project = add support for PGP keys, before only SSH.
#+END_NOTES
* A little bit of background
* PGP
  #+ATTR_REVEAL: :frag (appear)
- Pretty Good Privacy.
- Provides cryptographic privacy and authentication for data communication.
- Web of trust: users act as CA.
#+BEGIN_NOTES
Web of trust:
- Users sign each others key.
- User usually need to prove its identity \Rightarrow ID card, driver license, etc.
- Will trust that signature is from someone if trust someone who trusts it \Rightarrow trust delegation.
#+END_NOTES
* JVSS
#+ATTR_REVEAL: :frag (appear)
- Joint Verifiable Secret Sharing.
- Can generate threshold digital signature in a distributed way.
** Random shared secret generation
Assuming $n$ signers and a threshold of $t$.
#+ATTR_REVEAL: :frag (appear)
- Each signer serves the role of the 'dealer'
- Produces $n-$ shares secret, send share to others.
- Every other signers verifies that the dealing has been made correctly.
#+ATTR_REVEAL: :frag (appear)
\Rightarrow allows to detect cheaters
#+ATTR_REVEAL: :frag (appear)
- When everyone has played the 'dealer' role, each signer combines the $n$ shares into a global secret.
** Setup phase
#+ATTR_REVEAL: :frag (appear)
- Creation of a long term shared secret.
- Will be used for every signing round.
- Signature created can be checked against it.
** Signing phase
#+ATTR_REVEAL: :frag (appear)
- Creation of a short term shared secret.
- Combined with long term secret.
- Generate a valid signature if at least $t$ signers.
* CISC
 #+ATTR_REVEAL: :frag (appear)
- CISC identity SkipChain.
- Goal: provide a simple and secure identity management service.
#+BEGIN_NOTES
What we are working on.

Help the user to manage her identities.
#+END_NOTES
** Architecture
#+ATTR_HTML: :width 75% :height 75%
[[./cisc.png]]
#+BEGIN_NOTES
Architecture of CISC

1. User has manager devices
  - Registered on the Cothority, identified by a key pair
  - Have voting power to modify/make request to the cothority
2. Cothority-servers, set of server running the service
  - Has a private special blockchain on them \Rightarrow contains identities of the User
  - Client can make change request, will only be accepted if threshold of devices accept \Rightarrow prevent one compromised device making unwanted changes
3. Clients, person wanting to identify/communicate with the user
  - can be services (Github), IoT devices or real people (contacts)
  - Can download blockchain and check user's identity
#+END_NOTES
** Skipchain
#+ATTR_HTML: :width 75% :height 75%
[[./skipchain.png]]

#+BEGIN_NOTES
Blockchain = double linked and called skipchain:
- Backward link = same (hash)
- Forward link, cannot be hash, since next block not known
- Forward link = signature of threshold of manager devices + CoSi signature.
- Allows for trust delegation from old keys to new keys
  - Someone trusting old key  of client will be able to verify each step until the new head (new keys)
  - Does not need to trust any intermediary.

Current implementation SSH, goal, add PGP.
#+END_NOTES

* Problem:@@html:<br>@@Using PGP with more than one device...
** What we want:
#+ATTR_REVEAL: :frag (appear)
- Being able to sign and decrypt message from any device.
- Not losing everything when a device is compromised.
** Same key on every device?
#+ATTR_REVEAL: :frag (appear)
- We can sign and decrypt from any device!
- But...
- If one device is lost, the key is lost...
- All the trust gained is lost!
** Sub-keys
#+ATTR_REVEAL: :frag (appear)
- Linked to a master key, same trust level.
- Signing resolved!
- In case of device loss, revocation of the sub-key.
- Decryption becomes problematic...
- What if there is a man-in-the-middle (freeze attack)?
#+BEGIN_NOTES
Create a master key, store it somewhere safe (USB key). We create a sub-key for each device. A sub-key is linked to our master key, thus if our master key is trusted so is our sub-key

If we want to sign from any device, the signature will be trusted by someone trusting our master key

If we lose a device, we can revoke the sub-key without losing the master key.

Decryption becomes a problem: other person needs to know of every sub-key, or risks to use different sub-key from device we use...

client not user !
If man-in-the-middle dropping every revocation request \Rightarrow Neither revocation server nor people wanting to communicate have way of knowing...
#+END_NOTES
** Using skipchains
#+ATTR_REVEAL: :frag (appear)
- Latest valid key is placed in the skipchain
- Trust displaced in the skipchain.
- Can define a maximum epoch for the block.
- Solves the freeze attack!
- But...
- Interlocutor needs to know how the skipchain works.
#+BEGIN_NOTES
When we want to revoke a key, we just create a new block with the key removed (and maybe a new key), trust in the skipchain not to be compromised and have latest valid key.

Then we can define a maximum epoch for the block, when there is no new block after a certain time, we can consider that there is a freeze attack occurring.

Person wanting to communicate needs to have knowledge of the skipchain in order to know if key is still valid...
#+END_NOTES
* Our solution: CISC and JVSS
 #+ATTR_REVEAL: :frag (appear)
- Split our PGP key on a cothority using secret sharing and JVSS:
 #+ATTR_REVEAL: :frag (appear)
  - Have one global public key, sent to PGP servers.
  - Each conode only has a share of the key.
- Use CISC to manage the list of authoritative devices.
#+BEGIN_NOTES
Since each conode only has a share of the key, need threshold of compromised node in order to compromise key \Rightarrow should be a rare event since the cothority is mostly trustworthy.
#+END_NOTES
** Signing and Decryption
 #+ATTR_REVEAL: :frag (appear)
- Everything done using publicly available key.
- Signature will appear to be signed by it.
- Encryption can be made with it.
- We can make a signing/decryption request from any device.
#+BEGIN_NOTES
Same trust level as split key.
#+END_NOTES
** Device loss and freeze attack
 #+ATTR_REVEAL: :frag (appear)
- In case of device loss, revoke its access to CISC.
- Attacker can temporarily sign/decrypt.
- Key is not affected at all.
- Also use maximum epoch for solving freeze attack.
** Interoperability
 #+ATTR_REVEAL: :frag (appear)
- Public key made available as usual.
- Following skipchain only needed for added security (freeze attack).
#+BEGIN_NOTES
No need to follow the skipchain to contact the user with the correct key, since key doesn't change in case of compromised device.
#+END_NOTES
* Implementation in Cothority
** Reality check
 #+ATTR_REVEAL: :frag (appear)
- Impossible with current implementation of JVSS to bring own key.
- Threshold decryption not present in /dedis/crypto/.
#+BEGIN_NOTES
Solution: letting JVSS create the key for us, can still make it a sub-key of the key we used before.

Not enough time to implement decryption...
#+END_NOTES
** Interfacing OpenPGP and /dedis/crypto/
#+BEGIN_SRC go
package openpgp
#+END_SRC
 #+ATTR_REVEAL: :frag (appear)
- Straightforward using OpenPGP implementation of /golang/x/crypto/.
- Able to create valid OpenPGP signature, public and private keys packet.
#+BEGIN_NOTES
Dedis' implementation respects standards!
#+END_NOTES
** JVSS protocol and JVSS service
#+BEGIN_SRC go
package jvss
#+END_SRC
 #+ATTR_REVEAL: :frag (appear)
- Separation of the JVSS protocol in two parts.
- Setup protocol:
  - Creates a shared secret and a public key.
  - Sends to the service its secret share.
- Signing protocol:
  - Initialized with previously created shares.
  - Makes round of signing using the shares.
- Service allows to save/load shares.
** COMMENT Adding the JVSS service to the Identity service
#+BEGIN_SRC go
package identity
#+END_SRC
 #+ATTR_REVEAL: :frag (appear)
- Adding logic for setup and signing.
- Only allow authorized device to make requests.
** Adding everything to the CISC application
#+BEGIN_SRC go
package cisc
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC go
pgp setup
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC go
pgp sign
#+END_SRC
* Benchmark
#+BEGIN_NOTES
Made on a single machine \Rightarrow may not be the same in real life.
#+END_NOTES
** Signing time with number of hosts
#+ATTR_HTML: :width 75% :height 75%
[[./latency.png]]
#+BEGIN_NOTES
Scaling of signing time with the number of hosts, quadratic due to JVSS O(n^2).

16 or 32 hosts not that bad.
#+END_NOTES
** COMMENT Bandwidth with number of hosts
#+ATTR_HTML: :width 75% :height 75%
[[./bandwidth.png]]
#+BEGIN_NOTES
Same with bandwidth, similar result.
#+END_NOTES
** Scaling with number of clients (16 hosts)
#+ATTR_HTML: :width 75% :height 75%
[[./scaling.png]]
#+BEGIN_NOTES
Scaling with the number of clients and interval between each request per clients

Done with 16 hosts, looked most promising.

With 32 clients and an interval of 15 seconds, takes less than 15 seconds \Rightarrow could mean that we could do around 130 signatures per minute.
Equivalent to 200'000 signatures per day, estimating that average person at EPFL sends 10-20 e-mails. Implementation could provide decentralized secure e-mail for more or less the EPFL.
#+END_NOTES
#+REVEAL: split
From last slide:
#+ATTR_REVEAL: :frag (appear)
- With 32 clients and an interval of 15 seconds, round takes less than 15 seconds.
- We can make around 4 signatures/minute \times 32 clients \cong 130 signatures/minute.
- 130 signatures/minute \times 60 minutes/hour \times 24 hours/day \cong 200'000 signatures/day.
- Average EPFL user sends 10-20 mails per day.
- We can provide all EPFL (15'000 people) decentralized and secure e-mail.
* What's left to be done
 #+ATTR_REVEAL: :frag (appear)
- Splitting user's key with JVSS.
- Threshold decryption.
#+BEGIN_NOTES
More convenient to use user's defined key.

Decryption would be great to have.
#+END_NOTES
